generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Ipo {
  ipo_id            String              @id @unique
  name              String              @db.VarChar(255)
  series            Ipo_Series
  opening_date      String
  closing_date      String
  ipo_details Ipo_Details?
  ipo_reservations Ipo_reservation?
  ipo_timeline Ipo_Timeline?
  ipo_lotsize Ipo_Lotsize?
  ipo_promoterHolding Ipo_PromoterHolding?
  ipo_financials Ipo_Financials?
  ipo_kpi Ipo_Kpi?
  ipo_contact Ipo_Contact?
  registrar_contact Registrar_Contact?
  suggested_ipo Suggested_Ipo?
}

enum Ipo_Series {
  main
  sme
}

model Ipo_Details {
  id String @id @unique
  ipo_id String @unique
  ipo_date String
  listing_date String
  face_value String
  price String
  lot_size String
  total_issue_size String
  fresh_issue String
  issue_type String
  listing_at String
  share_holding_pre_issue String
  share_holding_post_issue String
  market_maker_portion String
  about String
  objectOfIssue String
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model Ipo_reservation {
  id String @id @unique
  ipo_id String @unique
  retail_shares_offerred String
  other_shares_offerred String
  total_shares_offerred String
  qib_shares_offerred String
  anchor_shares_offerred String
  market_maker_shares_offerred String
  nii_hnii_shares_offerred String
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model Ipo_Timeline {
  id String @id @unique
  ipo_id String @unique
  open_date String
  close_date String
  basis_of_allotment String
  initiation_of_refunds String
  credit_of_shares_to_demat String
  listing_date String
  cutoff_time_for_upi_mandate String
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model Ipo_Lotsize {
  id String @id @unique
  ipo_id String @unique
  application String[] 
  lots String[]
  shares String[]
  amount String[]
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model Ipo_PromoterHolding {
  id String @id @unique
  ipo_id String @unique
  shareholding_preissue String 
  shareholding_postissue String
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model Ipo_Financials {
  id String @id @unique
  ipo_id String @unique
  period_ended String[]
  assets String[]
  revenue String[]
  profit_after_tax String[]
  net_worth String[]
  reserves_and_surplus String[]
  total_borrowing String[]
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model Ipo_Kpi {
  id String @id @unique
  ipo_id String @unique
  roe String
  roce String
  ronw String
  pbv String
  pat_marin_percent String
  eps_rs_preIpo String
  eps_rs_postIpo String
  pe_preIpo String
  pe_postIpo String
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model Ipo_Contact {
  id String @id @unique
  ipo_id String @unique
  address String
  phone String
  email String
  website String
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model Registrar_Contact {
  id String @id @unique
  ipo_id String @unique
  name String
  phone String
  email String
  website String
  ipo Ipo @relation(fields: [ipo_id], references: [ipo_id], onDelete: Cascade)
}

model admin {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  fullName     String
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         String   @default("admin")
  blogs        Blog[]   @relation("AdminToBlog")
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String
  description String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    String
  content     String
  imageUrl    String?
  authorId    Int
  author      admin    @relation("AdminToBlog", fields: [authorId], references: [id])
}

model Suggested_Ipo {
  id Int @id @default(autoincrement())
  ipo_id String @unique
  ipo        Ipo      @relation(fields: [ipo_id], references: [ipo_id])
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
}

model Active_Sessions {
  id Int @id @default(autoincrement())
  userId Int @unique
  refresh_token String
}

enum IPO_Series {
  main
  sme
}